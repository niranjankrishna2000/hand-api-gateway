definitions:
  pb.AddMonthlyGoalResponse:
    properties:
      amount:
        type: integer
      category:
        type: integer
      day:
        type: integer
      response:
        type: string
      status:
        type: integer
    type: object
  pb.AddSuccessStoryResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      successStory:
        $ref: '#/definitions/pb.SuccesStory'
    type: object
  pb.AddUpdatesResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      updates:
        items:
          $ref: '#/definitions/pb.Update'
        type: array
    type: object
  pb.AdminDashboardResponse:
    properties:
      alltime:
        $ref: '#/definitions/pb.Stats'
      annual:
        $ref: '#/definitions/pb.Stats'
      daily:
        $ref: '#/definitions/pb.Stats'
      monthly:
        $ref: '#/definitions/pb.Stats'
      response:
        type: string
      status:
        type: integer
      weekly:
        $ref: '#/definitions/pb.Stats'
    type: object
  pb.AdminLoginResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      token:
        type: string
    type: object
  pb.ApproveCampaignResponse:
    properties:
      post:
        $ref: '#/definitions/pkg_admin_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CampaignDetailsResponse:
    properties:
      post:
        $ref: '#/definitions/pkg_admin_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CampaignRequestListResponse:
    properties:
      post:
        items:
          $ref: '#/definitions/pkg_admin_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CategoryListResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/pkg_admin_pb.Category'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CategoryPostsResponse:
    properties:
      category:
        $ref: '#/definitions/pkg_admin_pb.Category'
      posts:
        items:
          $ref: '#/definitions/pkg_admin_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CategoryStatsResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/pkg_admin_pb.Category'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ChangeUserPermissionResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      user:
        $ref: '#/definitions/pkg_auth_pb.User'
    type: object
  pb.ClearNotificationResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.Comment:
    properties:
      comment:
        type: string
      id:
        type: integer
      postid:
        type: integer
      time:
        type: string
      userid:
        type: integer
    type: object
  pb.CommentPostResponse:
    properties:
      Post:
        $ref: '#/definitions/pb.PostDetails'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.CreatePostResponse:
    properties:
      post:
        $ref: '#/definitions/pkg_user_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeleteCategoryResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeleteCommentResponse:
    properties:
      Post:
        $ref: '#/definitions/pb.PostDetails'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeleteNotificationResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeletePostResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeleteReportResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.DeleteSuccessStoryResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      successStories:
        items:
          $ref: '#/definitions/pb.SuccesStory'
        type: array
    type: object
  pb.DeleteUpdatesResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      updates:
        items:
          $ref: '#/definitions/pb.Update'
        type: array
    type: object
  pb.DonateResponse:
    properties:
      Post:
        $ref: '#/definitions/pkg_user_pb.Post'
      link:
        type: string
      response:
        type: string
      status:
        type: integer
    type: object
  pb.Donation:
    properties:
      amount:
        type: integer
      date:
        type: string
      id:
        type: integer
      paymentid:
        type: string
      post:
        $ref: '#/definitions/pkg_user_pb.Post'
    type: object
  pb.DonationHistoryResponse:
    properties:
      donations:
        items:
          $ref: '#/definitions/pb.Donation'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.EditMonthlyGoalResponse:
    properties:
      amount:
        type: integer
      category:
        type: integer
      day:
        type: integer
      response:
        type: string
      status:
        type: integer
    type: object
  pb.EditPostResponse:
    properties:
      post:
        $ref: '#/definitions/pkg_user_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.EditProfileResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      user:
        $ref: '#/definitions/pb.UserProfile'
    type: object
  pb.EditSuccessStoryResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      successStory:
        $ref: '#/definitions/pb.SuccesStory'
    type: object
  pb.EditUpdatesResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      updates:
        items:
          $ref: '#/definitions/pb.Update'
        type: array
    type: object
  pb.ExpirePostRequest:
    properties:
      postid:
        type: integer
      userid:
        type: integer
    type: object
  pb.FeedsResponse:
    properties:
      Posts:
        items:
          $ref: '#/definitions/pkg_admin_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.GetCreatePostResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/pkg_user_pb.Category'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.GetMonthlyGoalResponse:
    properties:
      amount:
        type: integer
      day:
        type: integer
      response:
        type: string
      status:
        type: integer
    type: object
  pb.GetMyCampaignsResponse:
    properties:
      Posts:
        items:
          $ref: '#/definitions/pkg_user_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.GetSuccessStoryResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      successStories:
        items:
          $ref: '#/definitions/pb.SuccesStory'
        type: array
    type: object
  pb.GetUpdatesResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      updates:
        items:
          $ref: '#/definitions/pb.Update'
        type: array
    type: object
  pb.GetUserDetailsResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      user:
        $ref: '#/definitions/pkg_auth_pb.User'
    type: object
  pb.GetmyImpactResponse:
    properties:
      collected:
        type: integer
      donated:
        type: integer
      lifesChanged:
        type: integer
      likes:
        type: integer
      response:
        type: string
      status:
        type: integer
      views:
        type: integer
    type: object
  pb.LikePostResponse:
    properties:
      Post:
        $ref: '#/definitions/pb.PostDetails'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.LoginResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      token:
        type: string
      user:
        $ref: '#/definitions/pkg_auth_pb.User'
    type: object
  pb.LoginWithOtpResponse:
    properties:
      error:
        type: string
      status:
        type: integer
    type: object
  pb.MakePaymentRazorPayResponse:
    properties:
      FinalPrice:
        type: integer
      PaymentID:
        type: integer
      Razor_id:
        type: string
      UserID:
        type: integer
      Username:
        type: string
      response:
        type: string
      status:
        type: integer
    type: object
  pb.NewCategoryResponse:
    properties:
      category:
        $ref: '#/definitions/pkg_admin_pb.Category'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.Notification:
    properties:
      id:
        type: integer
      post:
        $ref: '#/definitions/pb.PostDetails'
      text:
        type: string
      time:
        type: string
      userid:
        type: integer
    type: object
  pb.NotificationDetailsResponse:
    properties:
      notification:
        $ref: '#/definitions/pb.Notification'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.NotificationResponse:
    properties:
      notifications:
        items:
          $ref: '#/definitions/pb.Notification'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.PostDetails:
    properties:
      comments:
        items:
          $ref: '#/definitions/pb.Comment'
        type: array
      donations:
        items:
          $ref: '#/definitions/pb.Donation'
        type: array
      post:
        $ref: '#/definitions/pkg_user_pb.Post'
      updates:
        items:
          $ref: '#/definitions/pb.Update'
        type: array
    type: object
  pb.PostDetailsResponse:
    properties:
      Post:
        $ref: '#/definitions/pkg_admin_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.PostStatsResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/pkg_admin_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ProfileDetailsRequest:
    properties:
      userid:
        type: integer
    type: object
  pb.RejectCampaignResponse:
    properties:
      post:
        $ref: '#/definitions/pkg_admin_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ReportCommentResponse:
    properties:
      Post:
        $ref: '#/definitions/pb.PostDetails'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ReportDetailsResponse:
    properties:
      post:
        $ref: '#/definitions/pb.ReportedPost'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ReportPostResponse:
    properties:
      Post:
        $ref: '#/definitions/pkg_user_pb.Post'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ReportedListResponse:
    properties:
      post:
        items:
          $ref: '#/definitions/pb.ReportedPost'
        type: array
      response:
        type: string
      status:
        type: integer
    type: object
  pb.ReportedPost:
    properties:
      post:
        $ref: '#/definitions/pkg_admin_pb.Post'
      reason:
        type: string
    type: object
  pb.SignUpResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      user:
        $ref: '#/definitions/pkg_auth_pb.User'
    type: object
  pb.Stats:
    properties:
      activecampaigns:
        type: integer
      collectedmoney:
        type: integer
      likes:
        type: integer
      posts:
        type: integer
      users:
        type: integer
    type: object
  pb.SuccesStory:
    properties:
      date:
        type: string
      id:
        type: integer
      image:
        type: string
      place:
        type: string
      text:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  pb.Update:
    properties:
      date:
        type: string
      id:
        type: integer
      postid:
        type: integer
      text:
        type: string
      title:
        type: string
    type: object
  pb.UserDeletePostResponse:
    properties:
      response:
        type: string
      status:
        type: integer
    type: object
  pb.UserFeedsResponse:
    properties:
      Categories:
        items:
          $ref: '#/definitions/pkg_user_pb.Category'
        type: array
      Posts:
        items:
          $ref: '#/definitions/pkg_user_pb.Post'
        type: array
      response:
        type: string
      status:
        type: integer
      successstories:
        items:
          $ref: '#/definitions/pb.SuccesStory'
        type: array
    type: object
  pb.UserListResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      user:
        items:
          $ref: '#/definitions/pkg_auth_pb.User'
        type: array
    type: object
  pb.UserPostDetailsResponse:
    properties:
      Post:
        $ref: '#/definitions/pb.PostDetails'
      response:
        type: string
      status:
        type: integer
    type: object
  pb.UserProfile:
    properties:
      Address:
        type: string
      DoB:
        type: string
      Gender:
        type: string
      PAN:
        type: string
      ProfilePicture:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  pb.UserStatsResponse:
    properties:
      response:
        type: string
      status:
        type: integer
      users:
        items:
          $ref: '#/definitions/pkg_admin_pb.User'
        type: array
    type: object
  pkg_admin_pb.Category:
    properties:
      category:
        type: string
      categoryid:
        type: integer
    type: object
  pkg_admin_pb.Post:
    properties:
      amount:
        type: integer
      collected:
        type: integer
      date:
        type: string
      id:
        type: integer
      image:
        type: string
      place:
        type: string
      status:
        type: string
      text:
        type: string
      userid:
        type: integer
    type: object
  pkg_admin_pb.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  pkg_auth_pb.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  pkg_user_pb.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  pkg_user_pb.Post:
    properties:
      account_no:
        type: string
      address:
        type: string
      amount:
        type: integer
      categoryid:
        type: integer
      collected:
        type: integer
      date:
        type: string
      id:
        type: integer
      image:
        type: string
      likes:
        type: integer
      place:
        type: string
      proof:
        type: string
      taxbenefit:
        type: boolean
      text:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  routes.AdminLoginRequestBody:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  routes.ApproveCampaignBody:
    properties:
      postId:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - postId
    type: object
  routes.ChangeUserPermissionBody:
    properties:
      userId:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - userId
    type: object
  routes.CommentPostRequestBody:
    properties:
      postid:
        maximum: 999
        minimum: 1
        type: integer
      text:
        description: test
        type: string
    required:
    - postid
    - text
    type: object
  routes.CreatePostRequestBody:
    properties:
      accno:
        maxLength: 17
        minLength: 9
        type: string
      address:
        maxLength: 50
        type: string
      amount:
        minimum: 100
        type: integer
      categoryId:
        maximum: 10
        minimum: 1
        type: integer
      date:
        type: string
      image:
        type: string
      place:
        maxLength: 10
        type: string
      taxbenefit:
        type: boolean
      text:
        maxLength: 50
        type: string
      title:
        maxLength: 20
        type: string
    required:
    - address
    - categoryId
    - date
    - place
    - taxbenefit
    - text
    - title
    type: object
  routes.DeleteCategoryBody:
    properties:
      categoryId:
        maximum: 99
        minimum: 1
        type: integer
    required:
    - categoryId
    type: object
  routes.DeletePostBody:
    properties:
      postId:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - postId
    type: object
  routes.DeleteReportBody:
    properties:
      postId:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - postId
    type: object
  routes.DonateRequestBody:
    properties:
      amount:
        minimum: 100
        type: integer
      postID:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - postID
    type: object
  routes.EditPostRequestBody:
    properties:
      accno:
        maxLength: 17
        minLength: 9
        type: string
      address:
        maxLength: 50
        type: string
      amount:
        minimum: 100
        type: integer
      date:
        type: string
      image:
        type: string
      place:
        maxLength: 10
        type: string
      postid:
        maximum: 999
        minimum: 1
        type: integer
      text:
        description: test
        maxLength: 50
        type: string
    required:
    - address
    - date
    - place
    - postid
    - text
    type: object
  routes.EditProfileRequestBody:
    properties:
      address:
        maxLength: 50
        type: string
      dob:
        type: string
      email:
        type: string
      gender:
        enum:
        - male
        - female
        - others
        type: string
      name:
        description: test
        type: string
      pan:
        type: string
      phone:
        type: string
      profilepic:
        type: string
    type: object
  routes.EditUpdateBody:
    properties:
      Id:
        maximum: 999
        minimum: 1
        type: integer
      text:
        description: test
        maxLength: 50
        minLength: 1
        type: string
      title:
        maxLength: 20
        minLength: 1
        type: string
    required:
    - Id
    type: object
  routes.LoginRequestBody:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  routes.LoginWithOtpRequestBody:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  routes.MonthlyGoalBody:
    properties:
      amount:
        maximum: 10000
        minimum: 100
        type: integer
      category:
        description: note add
        maximum: 5
        minimum: 1
        type: integer
      day:
        maximum: 28
        minimum: 1
        type: integer
    required:
    - amount
    - category
    - day
    type: object
  routes.NewCategoryBody:
    properties:
      category:
        maxLength: 20
        minLength: 2
        type: string
    required:
    - category
    type: object
  routes.OtpValidateRequestBody:
    properties:
      confirm:
        type: string
      otp:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - confirm
    - otp
    - password
    - phone
    type: object
  routes.RejectCampaignBody:
    properties:
      postId:
        maximum: 999
        minimum: 1
        type: integer
    required:
    - postId
    type: object
  routes.ReportCommentRequestBody:
    properties:
      commentId:
        maximum: 999
        minimum: 1
        type: integer
      text:
        maxLength: 20
        type: string
    required:
    - commentId
    - text
    type: object
  routes.ReportPostRequestBody:
    properties:
      postId:
        type: integer
      text:
        type: string
    type: object
  routes.SignUpRequestBody:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        description: check what is alphaunicode
        maxLength: 20
        minLength: 3
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - confirmpassword
    - email
    - name
    - password
    - phone
    type: object
  routes.SuccesStoryBody:
    properties:
      image:
        type: string
      place:
        maxLength: 10
        type: string
      text:
        maxLength: 50
        type: string
      title:
        maxLength: 15
        type: string
    required:
    - place
    - text
    - title
    type: object
  routes.UpdateBody:
    properties:
      Id:
        maximum: 999
        minimum: 1
        type: integer
      text:
        maxLength: 50
        minLength: 1
        type: string
      title:
        maxLength: 20
        minLength: 1
        type: string
    required:
    - Id
    - text
    - title
    type: object
info:
  contact: {}
paths:
  /admin/campaigns/approve:
    patch:
      consumes:
      - application/json
      description: Admin can Approve Campaign after verifying it
      parameters:
      - description: 'Post ID '
        in: body
        name: ApproveCampaignBody
        required: true
        schema:
          $ref: '#/definitions/routes.ApproveCampaignBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ApproveCampaignResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ApproveCampaignResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ApproveCampaignResponse'
      security:
      - api_key: []
      summary: Approve Campaigns
      tags:
      - Admin Campaign
  /admin/campaigns/details:
    get:
      consumes:
      - application/json
      description: Admin can see Campaign Details
      parameters:
      - description: 'Post ID '
        in: query
        name: postid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CampaignDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CampaignDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CampaignDetailsResponse'
      security:
      - api_key: []
      summary: Campaign Details
      tags:
      - Admin Campaign
  /admin/campaigns/reject:
    patch:
      consumes:
      - application/json
      description: Admin can Reject Campaign
      parameters:
      - description: 'Post ID '
        in: body
        name: RejectCampaignBody
        required: true
        schema:
          $ref: '#/definitions/routes.RejectCampaignBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.RejectCampaignResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.RejectCampaignResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.RejectCampaignResponse'
      security:
      - api_key: []
      summary: Reject Campaign
      tags:
      - Admin Campaign
  /admin/campaigns/reported:
    get:
      consumes:
      - application/json
      description: Admin can see reported posts
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ReportedListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ReportedListResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ReportedListResponse'
      security:
      - api_key: []
      summary: Reported posts
      tags:
      - Admin Reported
  /admin/campaigns/reported/delete:
    delete:
      consumes:
      - application/json
      description: Admin can Delete reported post
      parameters:
      - description: 'Post ID '
        in: body
        name: DeleteReportBody
        required: true
        schema:
          $ref: '#/definitions/routes.DeleteReportBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteReportResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteReportResponse'
      security:
      - api_key: []
      summary: Delete reported post
      tags:
      - Admin Reported
  /admin/campaigns/reported/details:
    get:
      consumes:
      - application/json
      description: Admin can see details of reported post
      parameters:
      - description: 'Post ID '
        in: query
        name: postid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ReportDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ReportDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ReportDetailsResponse'
      security:
      - api_key: []
      summary: Details of reported post
      tags:
      - Admin Reported
  /admin/campaigns/requestlist:
    get:
      consumes:
      - application/json
      description: Admin can see campaogn requests
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CampaignRequestListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CampaignRequestListResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CampaignRequestListResponse'
      security:
      - api_key: []
      summary: Campaign Requests
      tags:
      - Admin Campaign
  /admin/categories/categorylist:
    get:
      consumes:
      - application/json
      description: Admin can see Categories
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CategoryListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CategoryListResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CategoryListResponse'
      security:
      - api_key: []
      summary: Categories
      tags:
      - Admin Categories
  /admin/categories/categorylist/posts:
    get:
      consumes:
      - application/json
      description: Admin can see Category posts
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Category Id
        in: query
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CategoryPostsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CategoryPostsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CategoryPostsResponse'
      security:
      - api_key: []
      summary: Admin can see Category posts
      tags:
      - Admin Categories
  /admin/categories/delete:
    delete:
      consumes:
      - application/json
      description: Admin can Delete Category
      parameters:
      - description: 'Category ID '
        in: body
        name: DeleteCategoryBody
        required: true
        schema:
          $ref: '#/definitions/routes.DeleteCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteCategoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteCategoryResponse'
      security:
      - api_key: []
      summary: Delete Category
      tags:
      - Admin Categories
  /admin/categories/new:
    post:
      consumes:
      - application/json
      description: Admin can create New Category
      parameters:
      - description: Category Name
        in: body
        name: NewCategoryBody
        required: true
        schema:
          $ref: '#/definitions/routes.NewCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.NewCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.NewCategoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.NewCategoryResponse'
      security:
      - api_key: []
      summary: Create Category
      tags:
      - Admin Categories
  /admin/dashboard:
    get:
      consumes:
      - application/json
      description: Admin can see website statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.AdminDashboardResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.AdminDashboardResponse'
      security:
      - api_key: []
      summary: Admin Dashboard
      tags:
      - Admin Dashboard
  /admin/dashboard/User:
    get:
      consumes:
      - application/json
      description: Admin can see User toplist
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.UserStatsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.UserStatsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.UserStatsResponse'
      security:
      - api_key: []
      summary: Top Users
      tags:
      - Admin Dashboard
  /admin/dashboard/category:
    get:
      consumes:
      - application/json
      description: Admin can see top Categories
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CategoryStatsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
      security:
      - api_key: []
      summary: Top Categories
      tags:
      - Admin Dashboard
  /admin/dashboard/posts:
    get:
      consumes:
      - application/json
      description: Admin can see Post toplist
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.PostStatsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.PostStatsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.PostStatsResponse'
      security:
      - api_key: []
      summary: Top Posts
      tags:
      - Admin Dashboard
  /admin/feeds:
    get:
      consumes:
      - application/json
      description: Admin can see feeds
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.FeedsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.FeedsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.FeedsResponse'
      security:
      - api_key: []
      summary: Feeds
      tags:
      - Admin Feeds
  /admin/post/delete:
    delete:
      consumes:
      - application/json
      description: Admin can delete post here
      parameters:
      - description: 'Post ID '
        in: body
        name: DeletePostBody
        required: true
        schema:
          $ref: '#/definitions/routes.DeletePostBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeletePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeletePostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeletePostResponse'
      security:
      - api_key: []
      summary: Delete post
      tags:
      - Admin Feeds
  /admin/post/details:
    get:
      consumes:
      - application/json
      description: Admin can get post details
      parameters:
      - description: 'Post ID '
        in: query
        name: postid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.PostDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.PostDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.PostDetailsResponse'
      security:
      - api_key: []
      summary: Post detail
      tags:
      - Admin Feeds
  /admin/users/changepermission:
    patch:
      consumes:
      - application/json
      description: Admin can Change User Permission
      parameters:
      - description: 'User ID '
        in: body
        name: ChangeUserPermissionBody
        required: true
        schema:
          $ref: '#/definitions/routes.ChangeUserPermissionBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ChangeUserPermissionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ChangeUserPermissionResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ChangeUserPermissionResponse'
      security:
      - api_key: []
      summary: Change User Permission
      tags:
      - Admin Users
  /admin/users/details:
    get:
      consumes:
      - application/json
      description: Admin can get user details
      parameters:
      - description: 'User ID '
        in: query
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetUserDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.GetUserDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetUserDetailsResponse'
      security:
      - api_key: []
      summary: User detail
      tags:
      - Admin Users
  /admin/users/list:
    get:
      consumes:
      - application/json
      description: Admin can see User List
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.UserListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.UserListResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.UserListResponse'
      security:
      - api_key: []
      summary: User List
      tags:
      - Admin Users
  /adminlogin:
    post:
      consumes:
      - application/json
      description: Admin can login here
      parameters:
      - description: Admin Login Data
        in: body
        name: AdminLoginRequestBody
        required: true
        schema:
          $ref: '#/definitions/routes.AdminLoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.AdminLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.AdminLoginResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.AdminLoginResponse'
      summary: Admin Login
      tags:
      - Admin Auth
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot Password?User can login with otp here
      parameters:
      - description: User Login Data
        in: body
        name: LoginWithOtpRequestBody
        required: true
        schema:
          $ref: '#/definitions/routes.LoginWithOtpRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.LoginWithOtpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.LoginWithOtpResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.LoginWithOtpResponse'
      summary: User Login with otp
      tags:
      - User Auth
  /login:
    post:
      consumes:
      - application/json
      description: User can login here
      parameters:
      - description: User Login Data
        in: body
        name: b
        required: true
        schema:
          $ref: '#/definitions/routes.LoginRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.LoginResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.LoginResponse'
      summary: User Login
      tags:
      - User Auth
  /logout:
    post:
      consumes:
      - application/json
      description: User can logout here
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: User Logout
      tags:
      - User Auth
  /otp-validate:
    patch:
      consumes:
      - application/json
      description: User can validate otp here
      parameters:
      - description: Validate otp Data
        in: body
        name: b
        required: true
        schema:
          $ref: '#/definitions/routes.OtpValidateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.LoginResponse'
      summary: User Otp Validation
      tags:
      - User Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Adding new user to the database
      parameters:
      - description: User Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.SignUpRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.SignUpResponse'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.SignUpResponse'
      summary: signup
      tags:
      - User Auth
  /user/feeds:
    get:
      consumes:
      - application/json
      description: |-
        User can see feeds
        Select Type:
        Select Category:
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      - description: Page number
        in: query
        name: type
        type: integer
      - description: category
        in: query
        name: category
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.UserFeedsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.UserFeedsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.UserFeedsResponse'
      security:
      - api_key: []
      summary: Feeds
      tags:
      - User Post
  /user/notifications:
    get:
      consumes:
      - application/json
      description: User can see Notifications
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.NotificationResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.NotificationResponse'
      security:
      - api_key: []
      summary: Notifications
      tags:
      - User Notifications
  /user/notifications/clear:
    delete:
      consumes:
      - application/json
      description: User can Clear Notifications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ClearNotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ClearNotificationResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ClearNotificationResponse'
      security:
      - api_key: []
      summary: Clear Notification
      tags:
      - User Notifications
  /user/notifications/delete:
    delete:
      consumes:
      - application/json
      description: User can delete Notification
      parameters:
      - description: Notification Id
        in: query
        name: notificationId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteNotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteNotificationResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteNotificationResponse'
      security:
      - api_key: []
      summary: Delete Notification
      tags:
      - User Notifications
  /user/notifications/details:
    get:
      consumes:
      - application/json
      description: User can see Notification Details
      parameters:
      - description: Notification Id
        in: query
        name: notificationId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.NotificationDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.NotificationDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.NotificationDetailsResponse'
      security:
      - api_key: []
      summary: Notification Details
      tags:
      - User Notifications
  /user/post/comment:
    post:
      consumes:
      - application/json
      description: User can Comment new post
      parameters:
      - description: Comment post Data
        in: body
        name: commentBody
        required: true
        schema:
          $ref: '#/definitions/routes.CommentPostRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CommentPostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CommentPostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CommentPostResponse'
      security:
      - api_key: []
      summary: Comment
      tags:
      - User Post
  /user/post/comment/delete:
    delete:
      consumes:
      - application/json
      description: User can Delete post
      parameters:
      - description: Comment ID
        in: query
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteCommentResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteCommentResponse'
      security:
      - api_key: []
      summary: Delete a comment
      tags:
      - User Post
  /user/post/comment/report:
    post:
      consumes:
      - application/json
      description: User can Report Comment
      parameters:
      - description: Report Comment Data
        in: body
        name: reportCommentBody
        required: true
        schema:
          $ref: '#/definitions/routes.ReportCommentRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ReportCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ReportCommentResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ReportCommentResponse'
      security:
      - api_key: []
      summary: Report Comment
      tags:
      - User Post
  /user/post/delete:
    delete:
      consumes:
      - application/json
      description: Delete An expired post
      parameters:
      - description: Post Id
        in: query
        name: postid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pb.UserDeletePostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.UserDeletePostResponse'
      security:
      - api_key: []
      summary: Delete Post
      tags:
      - User Post
  /user/post/details:
    get:
      consumes:
      - application/json
      description: User can get post detail
      parameters:
      - description: Post ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.UserPostDetailsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.UserPostDetailsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.UserPostDetailsResponse'
      security:
      - api_key: []
      summary: Post detail
      tags:
      - User Post
  /user/post/details/report:
    post:
      consumes:
      - application/json
      description: User can Report post
      parameters:
      - description: Report Post Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.ReportPostRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ReportPostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.ReportPostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ReportPostResponse'
      security:
      - api_key: []
      summary: Report post
      tags:
      - User Post
  /user/post/donate/:
    post:
      consumes:
      - application/json
      description: User can donate for campaigns
      parameters:
      - description: Donation Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.DonateRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DonateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DonateResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DonateResponse'
      security:
      - api_key: []
      summary: Donate
      tags:
      - User Donations
  /user/post/donate/download-invoice:
    get:
      description: Download the invoice PDF file
      parameters:
      - description: invoice id
        in: query
        name: invoiceID
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: 'Couldn''t fetch data from client '
          schema:
            type: string
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Error in internal server
          schema:
            type: string
      security:
      - api_key: []
      summary: Download Invoice
      tags:
      - User Invoice
  /user/post/donate/generate-invoice:
    post:
      description: generate the invoice PDF file
      parameters:
      - description: invoice id
        in: query
        name: invoiceID
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "201":
          description: Successfully Generated
          schema:
            type: string
        "400":
          description: Invalid Post ID
          schema:
            type: string
        "403":
          description: You have not logged in
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
        "502":
          description: Error in internal server
          schema:
            type: string
      security:
      - api_key: []
      summary: generate Invoice PDF
      tags:
      - User Invoice
  /user/post/donate/history:
    get:
      consumes:
      - application/json
      description: User can see Donation History
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DonationHistoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DonationHistoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DonationHistoryResponse'
      security:
      - api_key: []
      summary: Donation History
      tags:
      - User Donations
  /user/post/donate/razorpay:
    get:
      consumes:
      - application/json
      description: User can pay for donation
      parameters:
      - description: pay id Data
        in: query
        name: payid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.MakePaymentRazorPayResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.MakePaymentRazorPayResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.MakePaymentRazorPayResponse'
      security:
      - api_key: []
      summary: Donate
      tags:
      - User Donations
  /user/post/edit:
    patch:
      consumes:
      - application/json
      description: User can edit post
      parameters:
      - description: Edit post Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.EditPostRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.EditPostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.EditPostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.EditPostResponse'
      security:
      - api_key: []
      summary: Edit post
      tags:
      - User Post
  /user/post/expire:
    patch:
      consumes:
      - application/json
      description: Expire an active post
      parameters:
      - description: Post Id
        in: query
        name: postid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ExpirePostRequest'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ExpirePostRequest'
      security:
      - api_key: []
      summary: Expire Post
      tags:
      - User Post
  /user/post/like:
    post:
      consumes:
      - application/json
      description: User can Like post
      parameters:
      - description: Post ID
        in: query
        name: postid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.LikePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.LikePostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.LikePostResponse'
      security:
      - api_key: []
      summary: User can Like a post
      tags:
      - User Post
  /user/post/new:
    get:
      consumes:
      - application/json
      description: Choose A category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetCreatePostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetCreatePostResponse'
      security:
      - api_key: []
      summary: Create Post
      tags:
      - User Post
    post:
      consumes:
      - application/json
      description: User can create new post
      parameters:
      - description: Create post Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.CreatePostRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.CreatePostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.CreatePostResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.CreatePostResponse'
      security:
      - api_key: []
      summary: Create Post
      tags:
      - User Post
  /user/post/updates:
    delete:
      consumes:
      - application/json
      description: User can delete an updates about a campaign
      parameters:
      - description: Update ID
        in: query
        name: updateId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteUpdatesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteUpdatesResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteUpdatesResponse'
      security:
      - api_key: []
      summary: Delete Update
      tags:
      - User Post
    get:
      consumes:
      - application/json
      description: User can see updates about a campaign
      parameters:
      - description: Post ID
        in: query
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetUpdatesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.GetUpdatesResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetUpdatesResponse'
      security:
      - api_key: []
      summary: Post Updates
      tags:
      - User Post
    patch:
      consumes:
      - application/json
      description: User can edit an updates about a campaign
      parameters:
      - description: Update Data
        in: body
        name: editUpdateBody
        required: true
        schema:
          $ref: '#/definitions/routes.EditUpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.EditUpdatesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.EditUpdatesResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.EditUpdatesResponse'
      security:
      - api_key: []
      summary: Edit Update
      tags:
      - User Post
    post:
      consumes:
      - application/json
      description: User can add an updates about a campaign
      parameters:
      - description: Update Data
        in: body
        name: updateBody
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.AddUpdatesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.AddUpdatesResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.AddUpdatesResponse'
      security:
      - api_key: []
      summary: Add Update
      tags:
      - User Post
  /user/post/upload-image:
    post:
      consumes:
      - multipart/form-data
      description: User can upload image
      parameters:
      - description: image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: failed to upload image
          schema:
            type: string
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Error in internal server
          schema:
            type: string
      security:
      - api_key: []
      summary: Upload image
      tags:
      - User Post
  /user/profile/details:
    get:
      consumes:
      - application/json
      description: User can see Profile Details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.ProfileDetailsRequest'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.ProfileDetailsRequest'
      security:
      - api_key: []
      summary: Profile Details
      tags:
      - User Profile
  /user/profile/edit:
    patch:
      consumes:
      - application/json
      description: |-
        User can edit profile
        Choose Gender : male,female and others
        Date of Birth Format : 2006-01-02
      parameters:
      - description: Edit profile Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/routes.EditProfileRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.EditProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.EditProfileResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.EditProfileResponse'
      security:
      - api_key: []
      summary: Edit profile
      tags:
      - User Profile
  /user/profile/monthly-goal:
    get:
      consumes:
      - application/json
      description: User can see MonthlyGoal
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetMonthlyGoalResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetMonthlyGoalResponse'
      security:
      - api_key: []
      summary: User MonthlyGoal
      tags:
      - User Profile
    post:
      consumes:
      - application/json
      description: User can add MonthlyGoal
      parameters:
      - description: Monthly Goal Data
        in: body
        name: monthlyGoalBody
        required: true
        schema:
          $ref: '#/definitions/routes.MonthlyGoalBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.AddMonthlyGoalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.AddMonthlyGoalResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.AddMonthlyGoalResponse'
      security:
      - api_key: []
      summary: Add MonthlyGoal
      tags:
      - User Profile
    put:
      consumes:
      - application/json
      description: User can edit an MonthlyGoal
      parameters:
      - description: MonthlyGoal Data
        in: body
        name: monthlyGoalBody
        required: true
        schema:
          $ref: '#/definitions/routes.MonthlyGoalBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.EditMonthlyGoalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.EditMonthlyGoalResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.EditMonthlyGoalResponse'
      security:
      - api_key: []
      summary: Edit MonthlyGoal
      tags:
      - User Profile
  /user/profile/my-campaigns:
    get:
      consumes:
      - application/json
      description: User can see their campaigns
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetMyCampaignsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.GetMyCampaignsResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetMyCampaignsResponse'
      security:
      - api_key: []
      summary: My Campaigns
      tags:
      - User Profile
  /user/profile/my-impact:
    get:
      consumes:
      - application/json
      description: User can see their impact on society
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetmyImpactResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetmyImpactResponse'
      security:
      - api_key: []
      summary: My Impact
      tags:
      - User Profile
  /user/success-stories:
    delete:
      consumes:
      - application/json
      description: User can Delete Success Stories
      parameters:
      - description: Success Story ID
        in: query
        name: storyId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.DeleteSuccessStoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.DeleteSuccessStoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.DeleteSuccessStoryResponse'
      security:
      - api_key: []
      summary: Success Story
      tags:
      - User Success Story
    get:
      consumes:
      - application/json
      description: User can see Success Stories
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: Page number
        in: query
        name: page
        type: integer
      - description: searchkey
        in: query
        name: searchkey
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.GetSuccessStoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.GetSuccessStoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.GetSuccessStoryResponse'
      security:
      - api_key: []
      summary: Success Story
      tags:
      - User Success Story
    patch:
      consumes:
      - application/json
      description: User can edit Success Stories
      parameters:
      - description: Post ID
        in: query
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.EditSuccessStoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.EditSuccessStoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.EditSuccessStoryResponse'
      security:
      - api_key: []
      summary: Edit Success Story
      tags:
      - User Success Story
    post:
      consumes:
      - application/json
      description: User can create Success Stories
      parameters:
      - description: Success Story Data
        in: body
        name: succesStoryBody
        required: true
        schema:
          $ref: '#/definitions/routes.SuccesStoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pb.AddSuccessStoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/pb.AddSuccessStoryResponse'
        "403":
          description: You have not logged in
          schema:
            type: string
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/pb.AddSuccessStoryResponse'
      security:
      - api_key: []
      summary: Create Success Story
      tags:
      - User Success Story
swagger: "2.0"
